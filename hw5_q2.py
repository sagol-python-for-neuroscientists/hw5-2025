import json
import pathlib
from typing import Union, Tuple
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = pathlib.Path(data_fname) if isinstance(data_fname, str) else data_fname
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname, 'r') as f:
            self.data = pd.DataFrame(json.load(f))

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
          A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
          the (ordinal) index after a reset.
        """
        if self.data is None:
            raise ValueError("Data not loaded. Use the read_data method first.")

        def is_valid_email(email: str) -> bool:
            if not isinstance(email, str):
                return False
            if email.count('@') != 1 or email.startswith('@') or email.endswith('@'):
                return False
            if '.' not in email or email.startswith('.') or email.endswith('.'):
                return False
            if email[email.index('@') + 1] == '.':
                return False
            return True

        valid_emails = self.data['email'].apply(is_valid_email)
        self.data = self.data[valid_emails].reset_index(drop=True)
        return self.data


def main():
    try:
        # Path to the JSON file containing the questionnaire data
        data_file = "data.json"

        # Create an instance of the QuestionnaireAnalysis class
        analysis = QuestionnaireAnalysis(data_file)

        # Read the data from the JSON file
        analysis.read_data()

        # Remove rows with invalid email addresses and print the cleaned DataFrame
        cleaned_data = analysis.remove_rows_without_mail()
        print("\nCleaned Data:")
        print(cleaned_data)

    except FileNotFoundError:
        print(f"Error: The file '{data_file}' was not found.")
    except ValueError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()
import pandas as pd
import numpy as np
import pathlib
from typing import Union, Tuple


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[str, pathlib.Path]):
        """
        Initializes the QuestionnaireAnalysis object.

        Parameters
        ----------
        data_fname : Union[str, pathlib.Path]
            Path to the JSON file containing the data.
        """
        self.data_fname = pathlib.Path(data_fname) if isinstance(data_fname, str) else data_fname
        self.data = None

    def read_data(self):
        """
        Reads the JSON data located in self.data_fname into memory.

        Raises
        ------
        ValueError
            If the file is not found or cannot be read.
        """
        try:
            self.data = pd.read_json(self.data_fname)
        except FileNotFoundError:
            raise ValueError(f"File {self.data_fname} not found.")
        except Exception as e:
            raise ValueError(f"Error reading data from {self.data_fname}: {e}")

def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
    """
    Finds, in the original DataFrame, the subjects that didn't answer
    all questions, and replaces that missing value with the mean of the
    other grades for that student.

    Returns
    -------
    df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade.
    arr : np.ndarray
        Row indices of the students whose new grades were generated.
    """
    if self.data is None:
        raise ValueError("Data not loaded. Use the read_data method first.")

    question_columns = [col for col in self.data.columns if col.startswith('q')]
    rows_with_na = self.data[question_columns].isna().any(axis=1)

    def replace_na_with_mean(row):
        if row.isna().any():
            mean_value = row.dropna().mean()
            return row.fillna(mean_value)
        return row

    self.data[question_columns] = self.data[question_columns].apply(replace_na_with_mean, axis=1)

    # Get indices of rows that were corrected
    corrected_indices = np.where(rows_with_na)[0]

    return self.data, corrected_indices


def correlate_gender_age(self) -> pd.DataFrame:
    """
    Looks for a correlation between the gender of the subject, their age,
    and the score for all five questions.

    Returns
    -------
    pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
    """
    if self.data is None:
        raise ValueError("Data not loaded. Use the read_data method first.")

    # Ensure 'gender' and 'age' columns exist
    if 'gender' not in self.data.columns or 'age' not in self.data.columns:
        raise ValueError("Required columns 'gender' and 'age' are missing.")

    # Convert 'age' to numeric and drop rows with invalid data
    self.data['age'] = pd.to_numeric(self.data['age'], errors='coerce')
    self.data = self.data.dropna(subset=['gender', 'age'])

    # Add a column indicating whether age is above or below 40
    self.data['age_group'] = self.data['age'].apply(lambda x: 'Above 40' if x > 40 else 'Below 40')

    # Set MultiIndex with ordinal index, gender, and age group
    self.data.set_index(['gender', 'age_group'], inplace=True)

    # Group by gender and age group, and calculate the average score per question
    grouped = self.data.groupby(['gender', 'age_group']).mean()

    return grouped

if __name__ == "__main__":
    # Example usage of the QuestionnaireAnalysis class
    analysis = QuestionnaireAnalysis("data.json")

    try:
        # Read the data
        analysis.read_data()

        # Fill missing values with the mean
        corrected_data, corrected_indices = analysis.fill_na_with_mean()
        print("Corrected Data:")
        print(corrected_data)
        print("Corrected Indices:")
        print(corrected_indices)

        # Calculate correlation between gender and age
        correlation_data = analysis.correlate_gender_age()
        print("\nCorrelation Data:")
        print(correlation_data)

    except ValueError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
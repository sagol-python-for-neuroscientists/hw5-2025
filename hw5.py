import pathlib
import os
import pandas as pd
from typing import Union, Tuple
import numpy as np
import matplotlib.pyplot as plt

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        '''
        Args:
            data_fname (Union[pathlib.Path, str]): Path to the JSON file containing questionnaire data
        '''
        self.data_fname = pathlib.Path(data_fname)
        self.data: pd.DataFrame = pd.DataFrame()  # will hold the loaded data
        

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname, orient="records") # read .json to pd.DataFrame
        

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        
        bins = np.arange(0, 101, 10) # define bins
        ages = self.data["age"].dropna().astype(float) # drop rows with missing ages 

        hist, bin_edges = np.histogram(ages, bins=bins) # compute histogram

        # plot
        plt.figure()
        plt.hist(ages, bins=bins, edgecolor="black")
        plt.xticks(bins)
        plt.xlabel("Age")
        plt.ylabel("Count")
        plt.title("Age Distribution")
        plt.show()
        return hist, bin_edges

    def is_valid_email(email: str) -> bool:
        '''Helper function for def remove_rows_without_mail

        Args:
            email (str): value of col "email" for given subject

        Returns:
            bool: "True" if str contains a valid email; "False" in ant other case
        '''

        if not isinstance(email, str):
            return False
        
        if email.count("@") != 1 or email.startswith("@") or email.endswith("@"): # must have exactly one "@", not at beginning or end
            return False
        
        if "." not in email or email.startswith(".") or email.endswith("."): # must have at least one ".", not at beginning or end
            return False
        
        at = email.index("@")
        if at + 1 < len(email) and email[at + 1] == ".": # no ".@ immediately after "@"
            return False
        
        return True
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous 
            rows removed and the (ordinal) index after a reset.
        """

        df = self.data.copy()
        mask = df["email"].apply(is_valid_email)
        cleaned = df.loc[mask].reset_index(drop=True)
        return cleaned


    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        
        df = self.data.copy()
       
        grade_cols = [
            col
            for col in df.columns
            if col not in ("email", "age")  # exclude 'email' and 'age' as non-grade columns
            and pd.api.types.is_numeric_dtype(df[col])
        ]

        # identify rows with at least one missing grade
        na_mask = df[grade_cols].isna().any(axis=1)
        arr = df.index[na_mask].to_numpy()

        # fill each NaN in those rows with the row-wise mean
        for idx in arr:
            row = df.loc[idx, grade_cols]
            mean_val = row.mean(skipna=True)
            df.loc[idx, grade_cols] = row.fillna(mean_val)

        return df, arr

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        df : pd.DataFrame
            A new DF with a new column - "score".
        """

        df = self.data.copy()
        grade_cols = [
            col
            for col in df.columns
            if col not in ("email", "age")
            and pd.api.types.is_numeric_dtype(df[col])
        ]

        count_nans = df[grade_cols].isna().sum(axis=1) # count missing grades per subject
        mean_scores = df[grade_cols].mean(axis=1, skipna=True) # compute mean of non-NaN grades
        floored = np.floor(mean_scores) # floor means
        scores = floored.where(count_nans <= maximal_nans_per_sub) # mask subjects with too many NaNs        
        df["score"] = scores.astype("UInt8") # convert to UInt8
        
        return df
    
    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        grouped_df : pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        
        df = self.data.copy()

        # build a 3-level index
        new_index = pd.MultiIndex.from_arrays(
            [
                df.index, # original ordinal row number
                df["gender"].values, # gender column
                df["age"].values # age column
            ],
            names=["row", "gender", "age"],
        )
        df.index = new_index # apply MultiIndex
        df = df.drop(columns=["gender", "age"]) # drop original cols
       
        df["above_40"] = df.index.get_level_values("age") > 40  # flag subjects by age threshold in col "above-40"

        # identify the question columns
        question_cols = [
            c for c in df.columns
            if pd.api.types.is_numeric_dtype(df[c]) # should be numeric
            and c not in ("age",) # should not be "age"
        ]

        grouped_df = df.groupby(["gender", "above_40"])[question_cols].mean()  # group by "gender" and "above_40"

        return grouped_df

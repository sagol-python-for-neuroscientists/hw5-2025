import pathlib
from typing import Union
from typing import Tuple
import pandas as pd
import json
import numpy as np
import matplotlib.pyplot as plt

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        """
        Initializes the QuestionnaireAnalysis object with the path to the
        data file. The file should be in JSON format.

        param data_fname: Path to the JSON data file.
        """

        if isinstance(data_fname, str):
            self.data_fname = pathlib.Path(data_fname)
        elif isinstance(data_fname, pathlib.Path):
            self.data_fname = data_fname
        else:
           raise TypeError("data_fname must be a string or pathlib.Path object")

        self.data = None
        self.read_data()

    def read_data(self):
         """Reads the json data located in self.data_fname into memory, 
         to the attribute self.data.
         """
         try:
            with self.data_fname.open('r', encoding='utf-8') as f:
                try:
                    self.data = pd.DataFrame(json.load(f))
                except json.JSONDecodeError:
                    f.seek(0)
                    self.data = f.read()
         except FileNotFoundError as e:
            raise ValueError(f"File not found: {self.data_fname}") from e

         return self.data


    def show_age_distrib(self)-> tuple[np.ndarray, np.ndarray]:
         """Calculates and plots the age distribution of the participants.

         Returns
         -------
         hist : np.ndarray
         Number of people in a given bin
         bins : np.ndarray
         Bin edges
         """
         
         # Extract ages from the data and plot it  
         bins = np.arange(0, 101, 10)            
         ages = pd.to_numeric(self.data['age'], errors='coerce').dropna().astype(int)
         hist, bin_edges = np.histogram(ages, bins=bins)

         plt.figure(figsize=(8, 4))
         plt.hist(ages, bins=bin_edges, edgecolor='black')  
         plt.title("Age Distribution")
         plt.xlabel("Age")
         plt.ylabel("Frequency")
         plt.grid(True)
         plt.show()
         
         return hist, bin_edges

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

         Returns
         -------
         df : pd.DataFrame
         A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
         the (ordinal) index after a reset.
        """ 
        
        def is_valid_email(email) -> bool:
            """Checks if the email is valid according to the specified rules."""
            # Must not be empty
            if not email:
                return False
            
            # Must not be None
            if email is None:
                return False
            
            # Must not be NaN
            if isinstance(email, float) and np.isnan(email):
                return False
            
            # Must be a string
            if not isinstance(email, str):
                return False
            email = email.strip()

            # Must contain exactly one @ and not at the start or end
            if email.count('@') != 1 or email.startswith('@') or email.endswith('@'):
                return False

            local, domain = email.split('@')

            # The character after @ must not be '.'
            if domain.startswith('.'):
                return False

            # Must contain '.' not at start or end
            if '.' not in email or email.startswith('.') or email.endswith('.'):
                return False

            # No whitespace allowed
            if ' ' in email:
                return False

            return True

        df = pd.DataFrame(self.data)

        valid_df = df[df['email'].apply(is_valid_email)].reset_index(drop=True)
        return valid_df
    
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
    all questions, and replaces that missing value with the mean of the
    other grades for that student.

    Returns
    -------
    df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
        Row indices of the students that their new grades were generated
        """
        df = pd.DataFrame(self.data).copy()

        # Dynamically detect grade columns
        grade_cols = [col for col in df.columns if col.startswith('q')]
        changed_rows = []

        for idx, row in df.iterrows():
            grades = pd.to_numeric(row[grade_cols], errors='coerce')  # Coerce to handle non-numeric
            if grades.isnull().any():
                mean = grades.mean(skipna=True)
                if not np.isnan(mean):
                    new_grades = grades.fillna(mean)
                    if not grades.equals(new_grades):
                        df.loc[idx, grade_cols] = new_grades
                        changed_rows.append(idx)

        return df, np.array(changed_rows)

    
    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
          """Calculates the average score of a subject and adds a new "score" column
          with it.
   
          If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
          score should be NA. Otherwise, the score is simply the mean of the other grades.
          The datatype of score is UInt8, and the floating point raw numbers should be
          rounded down.

           Parameters
          ----------
          maximal_nans_per_sub : int, optional
          Number of allowed NaNs per subject before giving a NA score.

         Returns
          -------
          pd.DataFrame
          A new DF with a new column - "score".
          """
          df = pd.DataFrame(self.data).copy()
          grade_cols = [col for col in df.columns if str(col).startswith('q')]
          scores = []

          for _, row in df.iterrows():
              grades = pd.to_numeric(row[grade_cols], errors='coerce')
              num_nans = grades.isna().sum()

              if num_nans > maximal_nans_per_sub:
                  scores.append(np.nan)
              else:
                  mean_score = np.floor(grades.mean(skipna=True))
                  scores.append(np.uint8(mean_score) if not np.isnan(mean_score) else np.nan)

          df['score'] = pd.Series(scores, dtype="UInt8")
          return df
    

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
    and the score for all five questions.

    Returns
    -------
         pd.DataFrame
         A DataFrame with a MultiIndex containing the gender and whether the subject is above
         40 years of age, and the average score in each of the five questions.
         """
        df = pd.DataFrame(self.data)

        # Drop rows with missing gender or age
        df = df.dropna(subset=['gender', 'age'])

        # Add a column for age group
        df['age'] = pd.to_numeric(df['age'], errors='coerce')
        df = df.dropna(subset=['age'])
        df['age'] = df['age'] > 40

        question_cols = [col for col in df.columns if str(col).startswith('q')]
        df[question_cols] = df[question_cols].apply(pd.to_numeric, errors='coerce')
        grouped = df.groupby(['gender', 'age'])[question_cols].mean()
        grouped.index.names = ['gender', 'age']
        grouped = grouped.sort_index().sort_index(axis=1)

        return grouped



 
    
       


         

import pathlib
import pandas as pd
import numpy as np
from typing import Tuple, Union
import json
import matplotlib.pyplot as plt

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        # ...
        self.data_fname = pathlib.Path(data_fname)
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        
        with self.data_fname.open('r', encoding='utf-8') as f:
            self.data = json.load(f)
        return self.data


    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
            """
        if self.data is None:
            self.read_data()

        df = pd.DataFrame(self.data)
        df['age'] = pd.to_numeric(df['age'], errors='coerce')
        ages = df['age'].dropna(axis=0)
        counts, bins = np.histogram(ages, bins=10)

        plt.hist(ages, bins=10)
        plt.title("ages")
        plt.show()

        return counts, bins
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
    A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
    the (ordinal) index after a reset.
        """
        df = pd.DataFrame(self.data)
        df['email'] = df['email'].apply(lambda x: x if is_valid_email(x) else np.nan)
        df = df.dropna(subset=['email'])
        return df    

    def is_valid_email(s):
        if not isinstance(s, str):
            return False
        if s.count('@') != 1:
            return False
        if s.startswith('@') or s.endswith('@') or s.startswith('.') or s.endswith('.') or not s.endswith('com'):
            return False
        local, domain = s.split('@')
        if domain.startswith('.'):
            return False
        return True

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
    The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
        Row indices of the students that their new grades were generated
        """
        df = pd.DataFrame(self.data)
        question_cols = [col for col in df.columns if col.startswith("q")]
        t = Tuple[pd.DataFrame, np.ndarray]
        rows_with_nans = df[question_cols].isna().any(axis=1) # find all rows with NaN values (missing questions)
        corrected_indices = df[rows_with_nans].index.to_numpy()
        
        for idx in corrected_indices:
            row = df.loc[idx, question_cols]
            mean_val = row.mean(skipna=True)
            df.loc[idx, question_cols] = row.fillna(mean_val)

        return df, corrected_indices

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = pd.DataFrame(self.data)
        df['score'] = np.nan()
        question_cols = [col for col in df.columns if col.startswith("q")]
        
        nan_counts = df[question_cols].isna().sum(axis=1)

        scores = np.floor(df[question_cols].mean(axis=1, skipna=True))

        scores[nan_counts > maximal_nans_per_sub] = np.nan

        df['score'] = scores.astype('UInt8', errors='ignore')

        return df

import pathlib
from typing import Union, Tuple
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = pathlib.Path(data_fname)
        if not self.data_fname.exists():
            raise ValueError(f"File {self.data_fname} does not exist.")
        self.data = None



    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        if not self.data_fname.exists():
            raise ValueError(f"File {self.data_fname} does not exist.")
        self.data = pd.read_json(self.data_fname, orient='records')
        
        # Replace string "nan" with actual np.nan
        self.data.replace("nan", np.nan, inplace=True)
        
        # Make sure numeric columns are parsed correctly
        numeric_cols = ["age", "q1", "q2", "q3", "q4", "q5"]
        for col in numeric_cols:
            if col in self.data.columns:
                self.data[col] = pd.to_numeric(self.data[col], errors="coerce")
        
        # Make sure time stamps column is parsed correctly
        if 'time_stamp' in self.data.columns:
            self.data["timestamp"] = pd.to_datetime(self.data["timestamp"], errors="coerce")



    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
        """
        age_data = self.data['age'].dropna()
        
        # Custom bins for age distribution
        bins = np.arange(0, 101, 10)
        
        # Compute histogram
        hist, bin_edges = np.histogram(age_data, bins=bins)
        
        # Plot
        plt.figure(figsize=(8, 4))
        plt.hist(age_data, bins=bins, edgecolor='black', align='left')
        plt.xlabel("Age")
        plt.ylabel("Number of participants")
        plt.title("Age Distribution")
        plt.xticks(bins)
        plt.tight_layout()
        plt.show()
        plt.close()

        return hist, bin_edges


    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        # Check email format using regex
        email_regex = r'^[^@\.][^@]*@[^@\.][^@]*\.[^@\.]+$'
        
        # Valid email mask
        valid_emails = self.data['email'].str.match(email_regex, na=False)
        
        # Filter invalid emails
        cleaned_df = self.data[valid_emails].reset_index(drop=True)
        self.data = cleaned_df.copy()
        return cleaned_df



    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        q_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        changed_indices = []

        for idx, row in self.data.iterrows():
            grades = row[q_cols]
            # Skip if all grades are NaN
            if grades.isnull().all():
                continue
            if grades.isnull().any():
                # Calculate the mean of the non-NaN values
                mean_value = grades.mean(skipna=True)
                # Fill NaN values with the mean
                self.data.loc[idx, q_cols] = grades.fillna(mean_value)
                # Record the index of the changed row
                changed_indices.append(idx)
        
        return self.data, np.array(changed_indices)

    
    # Helper method to calculate the score
    def _calculate_score(self, row: pd.Series, maximal_nans: int = 1) -> float:
        """Calculates the score for a given series of grades."""
        
        q_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        grades = row[q_cols]
        
        # Count NaNs in grades
        nans_count = grades.isna().sum()
        if nans_count > maximal_nans:
            return np.nan
        
        # Round down to nearest integer
        return np.floor(grades.mean(skipna=True))
    
    # Main method to score subjects
    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        q_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        
        # Calculate the score for each row
        self.data['score'] = self.data.apply(
            lambda row: self._calculate_score(row, maximal_nans_per_sub), axis=1)
        
        # Convert score to UInt8 where valid
        self.data['score'] = self.data['score'].astype('UInt8')
        return self.data
    


    # bonus method
    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """

        q_cols = ["q1", "q2", "q3", "q4", "q5"]

        # Drop rows missing gender or age
        df = self.data.dropna(subset=["gender", "age"]).copy()

        # Create age group: True if age > 40
        df["age"] = df["age"] > 40

        # Group by gender and age, calculate mean for each question
        result = df.groupby(["gender", "age"])[q_cols].mean()
        return result






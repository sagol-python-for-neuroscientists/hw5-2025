#author Bar Vered
import pathlib
import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from typing import Union, Tuple

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if isinstance(data_fname, str):
            self.data_fname = pathlib.Path(data_fname)
        elif isinstance(data_fname, pathlib.Path):
            self.data_fname = data_fname
        else:
            raise TypeError("data_fname must be a string or pathlib.Path object")
        
        if not self.data_fname.exists():
            raise ValueError("File does not exist")

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname, 'r') as f:
            self.data = pd.DataFrame(json.load(f))
            # Convert age column to integers, handling 'nan' strings
            self.data['age'] = pd.to_numeric(self.data['age'].replace('nan', np.nan), errors='coerce').astype('Int64')
            
            # Convert question columns to float, handling 'nan' strings
            question_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
            for col in question_cols:
                self.data[col] = pd.to_numeric(self.data[col].replace('nan', np.nan), errors='coerce')

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        bins = np.arange(0, 101, 10)
        hist, _ = np.histogram(self.data['age'], bins=bins)
        # plt.figure()
        # plt.hist(self.data['age'], bins=bins)
        # plt.xlabel('Age')
        # plt.ylabel('Count')
        # plt.title('Age Distribution')
        # plt.show()
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index after a reset.
        """
        def is_valid_email(email):
            if not isinstance(email, str):
                return False
            if email.count('@') != 1:
                return False
            if email.startswith('@') or email.endswith('@'):
                return False
            if '.' not in email:
                return False
            if email.startswith('.') or email.endswith('.'):
                return False
            at_index = email.index('@')
            if at_index + 1 < len(email) and email[at_index + 1] == '.':
                return False
            return True

        valid_emails = self.data['email'].apply(is_valid_email)
        return self.data[valid_emails].reset_index(drop=True)

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        df = self.data.copy()
        question_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        rows_with_nan = []
        
        for idx, row in df.iterrows():
            if row[question_cols].isna().any():
                mean_val = row[question_cols].mean()
                df.loc[idx, question_cols] = row[question_cols].fillna(mean_val)
                rows_with_nan.append(idx)
        
        return df, np.array(rows_with_nan)

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = self.data.copy()
        question_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        
        # Calculate number of NaNs per subject
        nan_counts = df[question_cols].isna().sum(axis=1)
        
        # Calculate mean scores
        scores = df[question_cols].mean(axis=1)
        
        # Set scores to NA where there are too many NaNs
        scores[nan_counts > maximal_nans_per_sub] = np.nan
        
        # Convert to UInt8, rounding down
        df['score'] = np.floor(scores).astype('UInt8')
        
        return df

if __name__ == "__main__":
    # Create an instance of QuestionnaireAnalysis
    q = QuestionnaireAnalysis("data.json")
    
    # Read the data
    q.read_data()
    
    # Demonstrate each function
    print("\n1. Age Distribution:")
    hist, bins = q.show_age_distrib()
    print("Histogram:", hist)
    print("Bin edges:", bins)
    
    print("\n2. Email Validation:")
    valid_emails = q.remove_rows_without_mail()
    print(f"Number of valid emails: {len(valid_emails)}")
    
    print("\n3. Filling Missing Values:")
    filled_df, rows = q.fill_na_with_mean()
    print(f"Rows with filled values: {rows}")
    
    print("\n4. Scoring Subjects:")
    scored_df = q.score_subjects()
    print("Score column added:", "score" in scored_df.columns) 
import numpy as np
import matplotlib.pyplot as plt
from typing import Union, Tuple
import json
import pathlib
import pandas as pd


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = pathlib.Path(data_fname)
        if not self.data_fname.exists():
            raise ValueError(f"File does not exist: {self.data_fname}")
        self.data = None

    def read_data(self):
        """Reads the JSON data into a DataFrame and stores it in self.data."""
        with self.data_fname.open(encoding="utf-8") as f:
            raw = json.load(f)
        self.data = pd.DataFrame(raw)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        ages = self.data["age"]
        ages = pd.to_numeric(ages, errors="coerce")
        ages = ages[(ages >= 0) & (ages < 100)]

        bins = np.arange(0, 101, 10)
        hist, bin_edges = np.histogram(ages, bins=bins)

        return hist, bin_edges


    @staticmethod
    def is_valid_email(email: str) -> bool:
        """Validate an email address using basic structural rules."""
        if not isinstance(email, str):
            return False
        if email.count('@') != 1:
            return False
        if email.startswith('@') or email.endswith('@'):
            return False
        if '.' not in email:
            return False
        if email.startswith('.') or email.endswith('.'):
            return False
        local, domain = email.split('@', 1)
        if domain.startswith('.'):
            return False
        if '..' in email:
            return False
        
        return True


    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index after a reset.
        """
        if "email" not in self.data.columns:
            raise ValueError("Missing 'email' column in data.")
        mask = self.data["email"].apply(self.is_valid_email)
        return self.data[mask].reset_index(drop=True)


    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        df = self.data.copy()
        question_cols = [col for col in df.columns if col.startswith('q')]
        df[question_cols] = df[question_cols].apply(pd.to_numeric, errors="coerce")

        mask = df[question_cols].isna().any(axis=1)
        indices = df[mask].index.to_numpy()

        for i in indices:
            row = df.loc[i, question_cols]
            mean_val = row.mean(skipna=True)
            df.loc[i, question_cols] = row.fillna(mean_val)

        return df, indices


    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = self.data.copy()
        question_cols = [col for col in df.columns if col.startswith('q')]
        df[question_cols] = df[question_cols].apply(pd.to_numeric, errors="coerce")

        na_counts = df[question_cols].isna().sum(axis=1)
        scores = df[question_cols].mean(axis=1).apply(np.floor)
        scores[na_counts > maximal_nans_per_sub] = pd.NA

        df["score"] = pd.Series(scores, dtype="UInt8")
        return df


    
    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        df = self.data.copy()

        question_cols = [col for col in df.columns if col.startswith("q")]
        df[question_cols] = df[question_cols].apply(pd.to_numeric, errors="coerce")

        df["age"] = pd.to_numeric(df["age"], errors="coerce")
        df = df[df["age"].notna()]  # Remove rows with invalid age

        df["age_above_40"] = df["age"] > 40

        result = df.groupby(["gender", "age_above_40"])[question_cols].mean()
        result.index.names = ["gender", "age"]

        return result.sort_index()
        

    def plot_gender_age_results(self, result: pd.DataFrame) -> None:
        """
        Plots the average question results per group (gender x age>40).
        
        Parameters
        ----------
        result : pd.DataFrame
            The grouped result returned from correlate_gender_age.
        """

        question_cols = result.columns.tolist()

        result_plot = result.reset_index()
        group_labels = result_plot.apply(lambda row: f"{row['gender']}, {'>40' if row['age'] else '<=40'}", axis=1)

        n_groups = len(result_plot)
        n_questions = len(question_cols)
        bar_width = 0.15
        x = np.arange(n_groups)

        fig, ax = plt.subplots(figsize=(14, 7))

        for i, question in enumerate(question_cols):
            ax.bar(x + i * bar_width,
                result_plot[question],
                width=bar_width,
                label=question)

        ax.set_xticks(x + bar_width * (n_questions - 1) / 2)
        ax.set_xticklabels(group_labels, rotation=45, ha="right")

        ax.set_xlabel("Group (Gender, Age > 40)")
        ax.set_ylabel("Average Score")
        ax.set_title("Average question results for different groups of participants")
        ax.legend(title="Question")
        plt.tight_layout()
        plt.show()



if __name__ == "__main__":

    # Create instance with the data file
    q = QuestionnaireAnalysis("data.json")
    
    # Load the data from file
    q.read_data()
    
    # show_age_distrib
    hist, bins = q.show_age_distrib()
    print("Age histogram:", hist)
    print("Bin edges:", bins)

    # remove_rows_without_mail
    valid_df = q.remove_rows_without_mail()
    print("Number of valid emails:", len(valid_df))

    # fill_na_with_mean
    filled_df, modified_rows = q.fill_na_with_mean()
    print("Indices of rows with filled NaNs:", modified_rows)

    # score_subjects
    scored_df = q.score_subjects()
    print("First few scored rows:")
    print(scored_df[["score"]].head())

    # correlate_gender_age
    print("Average scores by gender and age group:")
    res = q.correlate_gender_age()
    print(res)
    q.plot_gender_age_results(res) 
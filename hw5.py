import json
import numpy as np
import pandas as pd
import pathlib
from typing import Union, Tuple


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = pathlib.Path(data_fname)
        if not self.data_fname.exists():
            raise ValueError(f"File not found: {self.data_fname}")
        self.data = None
        

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
    
        with open(self.data_fname, 'r') as file:
            json_data = json.load(file)
        self.data = pd.DataFrame(json_data)
        return self.data

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.
    Returns
    -------
    hist : np.ndarray
    Number of people in a given bin
    bins : np.ndarray
    Bin edges
        """

        self.data['age'] = self.data['age'].replace('nan', np.nan) #I checked and all not int values are 'nan'. Could've simply ignored all strings using pd.to_numeric
        ages = self.data['age'].dropna()
        hist, bin_edges = np.histogram(ages, bins=np.arange(0,101,10))
        return hist, bin_edges
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
    A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
    the (ordinal) index after a reset.
        """
        self.data = self.data.dropna(subset=['email'])
        self.data = self.data[self.data['email'].apply(lambda s: isinstance(s, str))] #make sure all is string
        #add check if string
        rows_to_keep_1 = [i for i, s in enumerate(self.data['email'])
         if '@' in s and (0 < s.find('@') < (len(s) - 1)) and s[s.find('@') + 1] != '.'] #@ conditions - contains it, doesn't start or end and doesan't have dot after it
        self.data = self.data.iloc[rows_to_keep_1].reset_index(drop=True)
        rows_to_keep_2 = [i for i, s in enumerate(self.data['email'])
         if '.' in s and (0 < s.find('.') < (len(s) - 1))] #. conditions
        self.data = self.data.iloc[rows_to_keep_2].reset_index(drop=True)
        #self.data = self.data[self.data['email'].str.contains(r'\.com', na=False)] #another useful filter but doesn't pass tests
        return self.data
    
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
    The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
        Row indices of the students that their new grades were generated
        """
        filled_data = self.data.copy()
        filled_data.replace('nan', np.nan, inplace=True)
        questions = filled_data[['q1', 'q2', 'q3', 'q4', 'q5']]
        missing_indices = questions[questions.isnull().any(axis=1)].index.to_numpy()
        row_mean = questions.mean(axis=1, skipna=True)
        for i in missing_indices:
            questions.loc[i] = questions.loc[i].fillna(row_mean[i])
        filled_data[['q1', 'q2', 'q3', 'q4', 'q5']] = questions
        self.data = filled_data
        return self.data, missing_indices

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        data_with_score = self.data.copy()
        data_with_score.replace('nan', np.nan, inplace=True)
        questions = data_with_score[['q1', 'q2', 'q3', 'q4', 'q5']]
        row_mean = questions.mean(axis=1, skipna=True)
        na_count = questions.isnull().sum(axis=1)
        scores = np.where(na_count > maximal_nans_per_sub, np.nan, np.floor(row_mean))
        data_with_score['score']= pd.Series(scores, dtype='UInt8')
        return data_with_score

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

    Returns
    -------
    pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
    """

        fixed_df = self.data.replace('nan', np.nan)
        ordinal_index = fixed_df.index
        #creating a multi index:
        fixed_df.index = pd.MultiIndex.from_arrays([
            ordinal_index, fixed_df['gender'], fixed_df['age']], 
            names=['row', 'gender', 'age']
            )
        age_group = fixed_df.index.get_level_values('age').map(lambda x: True if x < 40 else False)
        gender_level = fixed_df.index.get_level_values('gender')
        #grouping by gender and age group:
        grouped = fixed_df.groupby([gender_level, age_group])
        grouped_means = grouped[['q1', 'q2', 'q3', 'q4', 'q5']].mean().reset_index() #returning to normal index
        return grouped_means

if __name__ == "__main__":
    q = QuestionnaireAnalysis('data.json')
    q.read_data()
    hist, bin_edges = q.show_age_distrib()
    print(hist, bin_edges)
    clean_df = q.remove_rows_without_mail()
    print(len(clean_df))
    filled_data, corrected_indices = q.fill_na_with_mean()
    data_with_score = q.score_subjects()
    print(data_with_score[:10])
    print(data_with_score['score'].dtype)
    grouped_means = q.correlate_gender_age()
    print('grouped means but different than test')
    print(grouped_means)
import pandas as pd
import pathlib
import numpy as np
from typing import Union, Tuple
import matplotlib

matplotlib.use("Agg")
import matplotlib.pyplot as plt


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        """Initializes the QuestionnaireAnalysis object with the path to the data file.

        Parameters
        ----------
        data_fname : Union[pathlib.Path, str]
            Path to the data file containing the questionnaire results in JSON format.
        """
        # Convert string paths to Path objects
        if isinstance(data_fname, str):
            data_fname = pathlib.Path(data_fname)

        # Ensure it's now a Path object
        if not isinstance(data_fname, pathlib.Path):
            raise TypeError("data_fname must be a string or a pathlib.Path object.")

        # Check if the file exists
        if not data_fname.exists():
            raise ValueError(f"The file {data_fname} does not exist.")

        # Save to instance variable
        self.data_fname = data_fname

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        try:
            self.data = pd.read_json(self.data_fname, orient="records")
        except ValueError as e:
            raise ValueError(f"Failed to read JSON data: {e}")

        print(self.data.head())

    # Q1

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        # Drop missing or non-numeric ages
        ages = self.data["age"].dropna()
        ages = pd.to_numeric(ages, errors="coerce").dropna()

        # Define bins
        bins = np.arange(0, 101, 10)  # [0, 10), ..., [90, 100]

        # Compute histogram
        hist, bin_edges = np.histogram(ages, bins=bins)

        # Plot
        plt.figure(figsize=(8, 5))
        plt.hist(ages, bins=bins, edgecolor="black")
        plt.title("Age Distribution")
        plt.xlabel("Age")
        plt.ylabel("Number of Participants")
        plt.grid(True)
        plt.xticks(bins)
        plt.show()

        return hist, bin_edges

    # Q2
    def print_all_emails(self):
        res = self.data["email"].dropna().unique().tolist()
        return res

    def is_valid_email(self, email: str) -> bool:
        """Checks if the given email is valid according to basic rules.

        Parameters
        ----------
        email : str
            The email address to validate.

        Returns
        -------
        bool
            True if the email is valid, False otherwise.
        """
        if not isinstance(email, str):
            return False

        # Must contain exactly one "@"
        if email.count("@") != 1:
            return False

        # Must not start or end with "@"
        if email.startswith("@") or email.endswith("@"):
            return False

        # Must contain "." and not at the start or end of the email
        if "." not in email or email.startswith(".") or email.endswith("."):
            return False

        # The letter following the '@' must not be "."
        at_index = email.index("@")
        if at_index + 1 >= len(email):
            return False
        if email[at_index + 1] == ".":
            return False

        return True

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        res = self.data[self.data["email"].apply(self.is_valid_email)].copy()
        res.reset_index(drop=True, inplace=True)
        return res

    # Q3
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
            all questions, and replaces that missing value with the mean of the
            other grades for that student.

        Returns
        -------
        df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        question_cols = [col for col in self.data.columns if col.startswith("q")]
        corrected_df = self.data.copy()

        # Calculate mean of question columns per row, ignoring NaNs
        row_means = corrected_df[question_cols].mean(axis=1)

        # Keep track of which rows have any NaNs in question columns
        mask_nans = corrected_df[question_cols].isna().any(axis=1)

        # Fill NaNs in question columns with row means (only for those rows)
        corrected_df.loc[mask_nans, question_cols] = (
            corrected_df.loc[mask_nans, question_cols].T.fillna(row_means[mask_nans]).T
        )

        # Return corrected df and indices where filling happened
        corrected_indices = np.where(mask_nans)[0]
        return corrected_df, corrected_indices

    # Q4
    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = self.data.copy()  # work on a copy to avoid modifying original

        # Select only question columns (assumes they start with 'q')
        question_cols = [col for col in df.columns if col.startswith("q")]

        # Work only on question columns
        n_nans = df[question_cols].isna().sum(axis=1)
        mean_scores = df[question_cols].mean(axis=1, skipna=True)

        # Calculate row-wise mean only on question columns
        mean_scores = df[question_cols].mean(axis=1, skipna=True)

        # If number of NaNs > maximal_nans_per_sub, assign NaN, else floor the mean
        score = mean_scores.where(n_nans <= maximal_nans_per_sub, other=np.nan)

        # Floor the scores (only non-NaN values)
        score = score.apply(lambda x: np.floor(x) if pd.notna(x) else x)

        # Create the score series with same index as df, fill NaNs for invalid rows
        full_score = pd.Series(data=np.nan, index=df.index, dtype="float")
        full_score.loc[score.index] = score

        # Convert to UInt8, allowing NaNs (nullable unsigned int)
        full_score = full_score.astype("UInt8")

        # Add "score" column
        df["score"] = full_score

        return df

    # Q5
    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
        """

        df = self.data.copy()

        # Ensure age is numeric, drop rows with missing gender or age
        df["age"] = pd.to_numeric(df["age"], errors="coerce")
        df = df.dropna(subset=["gender", "age"])

        # Create a boolean column for age > 40
        df["age_group"] = df["age"] > 40

        # Identify question columns (starting with 'q')
        question_cols = [col for col in df.columns if col.startswith("q")]

        # Group by gender and age_group and calculate mean per question
        grouped = df.groupby(["gender", "age_group"])[question_cols].mean()

        # Rename the index level from "age_group" to "age" (for matching test)
        grouped.index.set_names(["gender", "age"], inplace=True)

        return grouped

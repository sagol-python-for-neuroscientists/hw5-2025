import pathlib
import json
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from typing import Union, Tuple

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        file_path = pathlib.Path(data_fname)
        if file_path.exists():
            self.data_fname = file_path
            self.data = None
        else:
            raise ValueError("File path doesn't exist")
        

    def read_data(self):
        """
        Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname, 'r', encoding='utf-8') as f:
            df = pd.DataFrame(json.load(f))
        
        self.grade_cols = [f'q{i}' for i in range(1, 6)]
        df[self.grade_cols] = df[self.grade_cols].apply(pd.to_numeric, errors='coerce')
        self.data = df
            
    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """
        Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        if self.data is None:
            raise ValueError("Data not loaded. Please call read_data() first.")

        ages = pd.to_numeric(self.data['age'], errors='coerce').dropna()

        # Define bin edges: [0, 10), [10, 20), ..., [90, 100]
        bins = np.arange(0, 101, 10)

        # Compute histogram
        hist, bin_edges = np.histogram(ages, bins=bins)

        # # Plotting
        # plt.figure(figsize=(8, 4))
        # plt.hist(ages, bins=bins, edgecolor='black')
        # plt.title("Age Distribution of Participants")
        # plt.xlabel("Age")
        # plt.ylabel("Number of Participants")
        # plt.grid(True)
        # plt.tight_layout()
        # plt.show()

        return hist, bin_edges
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """
        Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index after a reset.
        """
        if self.data is None:
            raise ValueError("Data not loaded. Please call read_data() first.")

        def is_valid_email(email: str) -> bool:
            if not isinstance(email, str):
                return False
            if email.count('@') != 1:
                return False
            if email.startswith('@') or email.endswith('@'):
                return False
            if '.' not in email:
                return False
            if email.startswith('.') or email.endswith('.'):
                return False
            at_index = email.index('@')
            if email[at_index + 1: at_index + 2] == '.':
                return False
            return True

        valid_email_mask = self.data['email'].apply(is_valid_email)
        cleaned_df = self.data[valid_email_mask].reset_index(drop=True)
        return cleaned_df
    
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """
        Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        if self.data is None:
            raise ValueError("Data not loaded. Please call read_data() first.")

        modified_indices = []
        corrected_df = self.data.copy()
        for idx, row in self.data.iterrows():
            if row[self.grade_cols].isnull().any():
                mean = row[self.grade_cols].mean(skipna=True)
                if not np.isnan(mean):  # avoid filling all NaNs with NaN
                    corrected_df.loc[idx, self.grade_cols] = row[self.grade_cols].fillna(mean)
                    modified_indices.append(idx)

        return corrected_df, np.array(modified_indices)
    
    
    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """
        Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        if self.data is None:
            raise ValueError("Data not loaded. Please call read_data() first.")

        data_copy = self.data.copy()
        scores = []
        for idx, row in self.data.iterrows():
            if row[self.grade_cols].isna().sum() > maximal_nans_per_sub:
                grade = pd.NA
            else:
                grade = int(np.floor(row[self.grade_cols].mean(skipna=True)))
            scores.append(grade)

        data_copy['score'] = pd.Series(scores, dtype="UInt8")
        return data_copy
    
    def correlate_gender_age(self) -> pd.DataFrame:
        """
        Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        if self.data is None:
            raise ValueError("Data not loaded. Please call read_data() first.")

        # Step a: Set MultiIndex with original index, gender, and age
        df = self.data.set_index([self.data.index, 'gender', 'age'])

        # Step b: Group by gender and whether age > 40
        grouped = df.groupby([df.index.get_level_values('gender'), df.index.get_level_values('age') > 40])

        # Step c: Compute mean scores per question per group
        # We assume question columns are numeric and not 'name', 'email', 'age', etc.
        result = grouped[self.grade_cols].mean()

        # Rename the second level of the index to something meaningful
        result.index.set_names(['gender', 'age>40'], inplace=True)

        return result
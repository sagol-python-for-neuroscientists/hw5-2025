from typing import Tuple, Union
import pandas as pd 
import pathlib
import numpy as np
import matplotlib.pyplot as plt

def is_mail_valid(row):
    email = row["email"]
    if (
        email.count("@") != 1 or
        email.startswith("@") or email.endswith("@") or
        "." not in email or
        email.startswith(".") or email.endswith(".") or
        email[email.index("@") + 1] == "."
    ):
        return False
    return True

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = pathlib.Path(data_fname)
        if not self.data_fname.exists():
            raise ValueError()

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        if not self.data_fname.exists():
            raise ValueError()
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
        """
        ages = self.data['age'].dropna()
        bins = list(range(0, 101, 10))
        hist, bins, _ = plt.hist(ages, bins=bins, edgecolor='black')
        plt.title('Histogram Participants Age')
        plt.xlabel('Age')
        plt.ylabel('Participants number')
        plt.show()
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        df = self.data[self.data.apply(is_mail_valid, axis=1)]
        return df.reset_index(drop=True)

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
        Row indices of the students that their new grades were generated
        """
        df = self.data.copy()
        changed_rows = df[df[["q1", "q2", "q3", "q4", "q5"]].isna().any(axis=1)].index.to_numpy()

        for q in ["q1", "q2", "q3", "q4", "q5"]:
            df[q] = df[q].fillna(df[q].mean())

        return df, changed_rows

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = self.data.copy()
        nan_counts = df[["q1", "q2", "q3", "q4", "q5"]].isna().sum(axis=1)
        scores = df[["q1", "q2", "q3", "q4", "q5"]].mean(axis=1)
        scores[nan_counts > maximal_nans_per_sub] = np.nan
        df['score'] = np.floor(scores)
        df['score'] = df['score'].astype("UInt8", errors='ignore')
        return df

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        df = self.data.copy()
        df.index = pd.MultiIndex.from_arrays([df.index, df['gender'], df['age']],
                                            names=['id', 'gender', 'age'])
        df['age_group'] = df.index.get_level_values('age') > 40
        grouped = df.groupby(['gender', 'age_group'])
        result = grouped[['q1', 'q2', 'q3', 'q4', 'q5']].mean()

        return result

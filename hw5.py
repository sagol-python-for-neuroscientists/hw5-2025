import pathlib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from typing import Union, Tuple

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        import matplotlib.pyplot as plt
        if isinstance(data_fname, str):
            self.data_fname = pathlib.Path(data_fname)
        elif isinstance(data_fname, pathlib.Path):
            self.data_fname = data_fname
        else:
            raise TypeError("data_fname must be a string or a pathlib.Path object") 
        
        if not self.data_fname.exists():
            raise ValueError(f"Data file {self.data_fname} does not exist.")
        
    def read_data(self): 
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        try:
            self.data = pd.read_json(self.data_fname)
        except Exception as e:
            raise ValueError(f"Failed to read data: {e}")
        return self.data
    
    def print_data(self):
        """Prints the data read from the file."""
        if not hasattr(self, 'data'):
            raise AttributeError("Data has not been read yet. Call read_data() first.")
        pd.set_option('display.max_rows', None)  # Show all rows
        pd.set_option('display.max_columns', None)  # Show all columns
        print(self.data)


    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray Number of people in a given bin
        bins : np.ndarray Bin edges
        """
        bins = np.linspace(0,100,11)
        hist, bin_edges, _ = plt.hist(self.data['age'], bins=bins, edgecolor='black')
        plt.xlabel('Age')
        plt.ylabel('Number of Participants')
        plt.title('Age Distribution')
        #plt.show()
        #num_nan_age = self.data['age'].isna().sum()
        #print(f"Number of NaN values in 'age' column: {num_nan_age}")
        #print(hist , bin_edges)
        return hist , bin_edges

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and the (original) index after a reset.
             
        """
        df = pd.DataFrame(self.data)
        # Keep only rows where 'email' contains '@'
        df = df[df['email'].astype(str).str.contains(r'^[^@]+@[^@]+\.[^@]+$', na=False)]
        df = df[df['email'].astype(str).str.count('@') == 1]
        df = df[~df['email'].astype(str).str.match(r'^\.', na=False)]
        df = df.reset_index(drop=True)
        return df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
       """Finds, in the original DataFrame, the subjects that didn't answer
       all questions, and replaces that missing value with the mean of the
       other grades for that student.

        Returns
        -------
        df : pd.DataFrame The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray Row indices of the students that their new grades were generated
       """
       df = pd.DataFrame(self.data)
       question_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
       nan_indices_list = []
       for col in question_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce')
            mean_val = df[col].mean()
            nan_idx = df[df[col].isna()].index.to_numpy()
            df.loc[df[col].isna(), col] = mean_val
            nan_indices_list.append(nan_idx)
       nan_indices = np.unique(np.concatenate(nan_indices_list))
       return df, nan_indices

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
       """Calculates the average score of a subject and adds a new "score" column with it.

       If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
       score should be NA. Otherwise, the score is simply the mean of the other grades.
       The datatype of score is UInt8, and the floating point raw numbers should be
       rounded down.

       Parameters
       ----------
       maximal_nans_per_sub : int, optional Number of allowed NaNs per subject before giving a NA score.

       Returns
       -------
       pd.DataFrame A new DF with a new column - "score".
       """
       df = pd.DataFrame(self.data)
       question_cols = ['q1', 'q2', 'q3', 'q4', 'q5']
       nan_counts = df[question_cols].isna().sum(axis=1)
       # Set score column to be the mean of all grades
       df['score'] = df[question_cols].mean(axis=1).astype("uint8").astype("UInt8")
       max_nans_row_indices = nan_counts >  maximal_nans_per_sub
       df.loc[max_nans_row_indices, 'score'] = pd.NA
       return df

    def correlate_gender_age(self) -> pd.DataFrame:
       """Looks for a correlation between the gender of the subject, their age 
       and the score for all five questions.

       Returns
       -------
       pd.DataFrame A DataFrame with a MultiIndex containing the gender and whether the subject is above
         40 years of age, and the average score in each of the five questions.
        """
       df = self.score_subjects()
       df = df.dropna(axis=0, subset=["age"])
       df = df.rename(columns={'age': 'age_new'})
       df.set_index(['gender', 'age_new'], inplace=True, append=True)
       df['age'] = df.index.get_level_values('age_new') > 40
       result = df.groupby(['gender', 'age'])[['q1', 'q2', 'q3', 'q4', 'q5']].mean()
       print (result)
       return result
       
       #print ([df[df['gender'] == 'Other']])
       #print ([df[df['score'] == 5]])
       #print(df.loc[('Other', 31.0 , 4)])
       #return df

if __name__ == "__main__":
 
    # Example usage
    data_fname = pathlib.Path("data.json")
    q = QuestionnaireAnalysis(data_fname)
    try:
        q.read_data()
        q.print_data()
        q.show_age_distrib()   
        df =  q.remove_rows_without_mail() 
        print(df['email'])
        print(q.fill_na_with_mean())
        df = q.score_subjects()
        print(df)
        q.correlate_gender_age()
    except Exception as e:
        print(f"An error occurred: {e}")




